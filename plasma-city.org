#+PROPERTY: header-args :session plasma :export both :tangle yes

* Intro

** Foreword
My aim with this programm is to have a blog on which I can publish my data science works.

** State of the coder
I already have a server running with python and mysql. I also have a domain name at ‘www.plasma.city’.
I already have good notions of programming with python and basic understanding of the web, html and css.

What I don't know though, is how to use the Flask micro-framework to build a website and deploy it on my server.
Also I don't know how I can export org files to html pages of website.
I would also like to add a script that publishes automaticly my articles based on a synchronisation of a folder on my local computer where I would save them.

** Purpose
So the aim of this programm is to provide an easy way to publish my work on a website. This website has to be an excellent communication tool presenting my work in a fancy way.

* Install instruction for this litterate programm

** What is litterate programming ?
Litterate programming is a programming method that emphasises the human reflexion over the computer understanding of your code.
Hence litterate programming is know for making programms more understandable for both programmers and non-programmers.
Literrate programming also has the virtue to make the documentation and design of the programm saner because it focuses on the end result and its publication.

This is my first attemt to write a program in litterate programming fashion.

** Org babel
All the code was writen in an org file. Org files can be opened in Emacs using a built-in mode called org-mode. It provides a convinient way to manage a litterate programm. In org files, code is cotained in code block which are organised in org headings. These heading can have meta-data so that we can use meta-programming to manage our code automaticly.

** Export Org File
You can download the org file and run it in emacs. Once you are in emacs org-mode visiting the file in a buffer, you can export the code contained in this org file to a full python module. This action is called tangling in litterate programming.


** Other exports
For compatibility with other work environements, I also exported the org files as a python package and as a jupyter notebook. You can also generate those easily by downloading the org file and exporting it in org-mode.

*** TODO How to export this org file to a python package ?

*** TODO How to export this org file to a jupyter notebook ?

* Code

** Overview

We will now write the code of our blog-website.

There are several way of designing a programm, here are two approches.

*** traditionnal programming perspective

 So, what code will wee need ?

**** python flask app

We will need a flask app to run our server. In this we will define how we handle queries made to our server. The server will for each query send back a different output that the client will load. OFr exemple if the client is visiting the website with a webbrowser, he will send http queries and we usually want to send him html documents back.

**** html documents

We need to build our skelton page. We can decide what shape the site has tp have, what parts will remain between each page, and what html code is specific to particular pages.

***** templates

We will handle the generalization of page structures with templates. This will be handled by a module that is implemented in flask called ninjasomething.

The aim is to be able to call templates and fill them depending on context.

***** css

The generalization of page apparences will be generated by our css files.


*** litterate programming perspective

So, what do we need ?

**** layers

We need to let different layers communicate together to act as a system that matches our desires

***** server program

First we want the server to deliver the our website to visitor. In html first.

***** server data

The server needs to acces the data he has to retrive.

***** filling the server

We need to populate the server with local data.

** Let's get started

 We will choose the litterate programming perspective.
 So we need to build a server able to retrive html, based on available data that we feed him with.

*** Server

When we run the app, we would like to be able to access it with a browser. Let's make our server alive and talking.

This is handled in our little [[file:~/code/web/plasma-city/flask_test/hello-ob.org][flask intro]], which follows the flask quickstart page.

To understand how this link is managed in our final file tangling (when all the file is exported as a whole programm ready to run) please sea [[*Follow links][Org Tangle Appendice]].

*** Data

So now our server can send data that can be viewed in a browser.

What do we now want the visitor to sea ? Obviously our articles. Maybe a mainpage containg all articles. Maybe a side bar. All this can be generated by templates.

We now have to learn about Flask's sidekick : jinja.

**** jinja tutorial

We want to make a

*** Feed



* Appendices

** Org Tangle

*** General

We will need to be able to tangle the code in this org file to the expected files. Why not even have the html code contained in this file so that everything is accessible on a signle page ?
For this to work the way we want, we need to make sure that in the tangling process, each source code block is exported so that the outcome is a nice organised directory. This can be done by defining properties to source block header and defining rules that will tangle deferent properties differently.

*** Follow links
